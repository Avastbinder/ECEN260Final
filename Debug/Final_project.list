
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004654  08004654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800479c  0800479c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  0800479c  0800479c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800479c  0800479c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0000579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047a0  080047a0  000057a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080047a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000010  080047b4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080047b4  000063cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c294  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0a  00000000  00000000  000122d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00013fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000984  00000000  00000000  00014c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002677e  00000000  00000000  000155e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cec7  00000000  00000000  0003bd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f42d3  00000000  00000000  00048c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cefc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  0013cf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800463c 	.word	0x0800463c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800463c 	.word	0x0800463c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fdf8 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f9a2 	bl	8000518 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d4:	f000 f9f1 	bl	80005ba <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fb34 	bl	8000844 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001dc:	f000 faf4 	bl	80007c8 <MX_SPI1_Init>
  MX_ADC1_Init();
 80001e0:	f000 fa16 	bl	8000610 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e4:	f000 fa8c 	bl	8000700 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GLCD_init(); // initialize the screen
 80001e8:	f000 fc0c 	bl	8000a04 <GLCD_init>
  GLCD_clear(); // clear the screen
 80001ec:	f000 fc4e 	bl	8000a8c <GLCD_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  // random number is for less visible jitter
	  	  HAL_Delay(4.6148);
 80001f0:	2004      	movs	r0, #4
 80001f2:	f000 fe61 	bl	8000eb8 <HAL_Delay>
	  	  GLCD_clear();
 80001f6:	f000 fc49 	bl	8000a8c <GLCD_clear>


	  	  // longitudinal line

	  	  // display 5 and -5 behind longitudinal line
	  	  GLCD_setCursor(0x0, 0x2);
 80001fa:	2102      	movs	r1, #2
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fc2b 	bl	8000a58 <GLCD_setCursor>
	  	  GLCD_putchar(39);
 8000202:	2027      	movs	r0, #39	@ 0x27
 8000204:	f000 fc5a 	bl	8000abc <GLCD_putchar>

	  	  if (mode == 1)
 8000208:	4ba2      	ldr	r3, [pc, #648]	@ (8000494 <main+0x2cc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d129      	bne.n	8000264 <main+0x9c>
	  	  {
	  		  bank_offset = 0x3;
 8000210:	4ba1      	ldr	r3, [pc, #644]	@ (8000498 <main+0x2d0>)
 8000212:	2203      	movs	r2, #3
 8000214:	701a      	strb	r2, [r3, #0]
	  		  x_offset = 0;
 8000216:	4ba1      	ldr	r3, [pc, #644]	@ (800049c <main+0x2d4>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
			  GLCD_setCursor(0x0, 0x0);
 800021c:	2100      	movs	r1, #0
 800021e:	2000      	movs	r0, #0
 8000220:	f000 fc1a 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(38);
 8000224:	2026      	movs	r0, #38	@ 0x26
 8000226:	f000 fc49 	bl	8000abc <GLCD_putchar>
			  GLCD_setCursor(0x0, 0x4);
 800022a:	2104      	movs	r1, #4
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fc13 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(37);
 8000232:	2025      	movs	r0, #37	@ 0x25
 8000234:	f000 fc42 	bl	8000abc <GLCD_putchar>
			  GLCD_setCursor(0x0, 0x1);
 8000238:	2101      	movs	r1, #1
 800023a:	2000      	movs	r0, #0
 800023c:	f000 fc0c 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(40);
 8000240:	2028      	movs	r0, #40	@ 0x28
 8000242:	f000 fc3b 	bl	8000abc <GLCD_putchar>
			  GLCD_setCursor(0x0, 0x5);
 8000246:	2105      	movs	r1, #5
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fc05 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(40);
 800024e:	2028      	movs	r0, #40	@ 0x28
 8000250:	f000 fc34 	bl	8000abc <GLCD_putchar>
			  GLCD_setCursor(0x0, 0x3);
 8000254:	2103      	movs	r1, #3
 8000256:	2000      	movs	r0, #0
 8000258:	f000 fbfe 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(41);
 800025c:	2029      	movs	r0, #41	@ 0x29
 800025e:	f000 fc2d 	bl	8000abc <GLCD_putchar>
 8000262:	e01a      	b.n	800029a <main+0xd2>

	  	  }
	  	  else
	  	  {
	  		  bank_offset = 0x5;
 8000264:	4b8c      	ldr	r3, [pc, #560]	@ (8000498 <main+0x2d0>)
 8000266:	2205      	movs	r2, #5
 8000268:	701a      	strb	r2, [r3, #0]
	  		  x_offset = 7;
 800026a:	4b8c      	ldr	r3, [pc, #560]	@ (800049c <main+0x2d4>)
 800026c:	2207      	movs	r2, #7
 800026e:	701a      	strb	r2, [r3, #0]
			  GLCD_setCursor(0x0, 0x0);
 8000270:	2100      	movs	r1, #0
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fbf0 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(38);
 8000278:	2026      	movs	r0, #38	@ 0x26
 800027a:	f000 fc1f 	bl	8000abc <GLCD_putchar>
			  GLCD_setCursor(0x0, 0x5);
 800027e:	2105      	movs	r1, #5
 8000280:	2000      	movs	r0, #0
 8000282:	f000 fbe9 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(43);
 8000286:	202b      	movs	r0, #43	@ 0x2b
 8000288:	f000 fc18 	bl	8000abc <GLCD_putchar>
			  GLCD_setCursor(0x0, 0x3);
 800028c:	2103      	movs	r1, #3
 800028e:	2000      	movs	r0, #0
 8000290:	f000 fbe2 	bl	8000a58 <GLCD_setCursor>
			  GLCD_putchar(42);
 8000294:	202a      	movs	r0, #42	@ 0x2a
 8000296:	f000 fc11 	bl	8000abc <GLCD_putchar>
	  	  }

  		  i = 0x7;
 800029a:	4b81      	ldr	r3, [pc, #516]	@ (80004a0 <main+0x2d8>)
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
		  while (i < 0x54)
 80002a0:	e016      	b.n	80002d0 <main+0x108>
		  {
			  GLCD_setCursor(i, bank_offset);
 80002a2:	4b7f      	ldr	r3, [pc, #508]	@ (80004a0 <main+0x2d8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4a7b      	ldr	r2, [pc, #492]	@ (8000498 <main+0x2d0>)
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	4611      	mov	r1, r2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fbd2 	bl	8000a58 <GLCD_setCursor>
			  GLCD_data_write(0x1 << x_offset);
 80002b4:	4b79      	ldr	r3, [pc, #484]	@ (800049c <main+0x2d4>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	2301      	movs	r3, #1
 80002bc:	4093      	lsls	r3, r2
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fb79 	bl	80009b8 <GLCD_data_write>
			  i++;
 80002c6:	4b76      	ldr	r3, [pc, #472]	@ (80004a0 <main+0x2d8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	4a74      	ldr	r2, [pc, #464]	@ (80004a0 <main+0x2d8>)
 80002ce:	6013      	str	r3, [r2, #0]
		  while (i < 0x54)
 80002d0:	4b73      	ldr	r3, [pc, #460]	@ (80004a0 <main+0x2d8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b53      	cmp	r3, #83	@ 0x53
 80002d6:	dde4      	ble.n	80002a2 <main+0xda>
		  }

	  	  i = 0x0;
 80002d8:	4b71      	ldr	r3, [pc, #452]	@ (80004a0 <main+0x2d8>)
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
	  	  while (i < 0x6)
 80002de:	e00e      	b.n	80002fe <main+0x136>
	  	  {
	  	  	  GLCD_setCursor(0x7, i);
 80002e0:	4b6f      	ldr	r3, [pc, #444]	@ (80004a0 <main+0x2d8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	2007      	movs	r0, #7
 80002ea:	f000 fbb5 	bl	8000a58 <GLCD_setCursor>
	  	  	  GLCD_data_write(0xff);
 80002ee:	20ff      	movs	r0, #255	@ 0xff
 80002f0:	f000 fb62 	bl	80009b8 <GLCD_data_write>
	  	  	  i++;
 80002f4:	4b6a      	ldr	r3, [pc, #424]	@ (80004a0 <main+0x2d8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3301      	adds	r3, #1
 80002fa:	4a69      	ldr	r2, [pc, #420]	@ (80004a0 <main+0x2d8>)
 80002fc:	6013      	str	r3, [r2, #0]
	  	  while (i < 0x6)
 80002fe:	4b68      	ldr	r3, [pc, #416]	@ (80004a0 <main+0x2d8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b05      	cmp	r3, #5
 8000304:	ddec      	ble.n	80002e0 <main+0x118>

    /* USER CODE BEGIN 3 */

	  // *** Interactable elements ***

	  	  if (time_value == 0x54)
 8000306:	4b67      	ldr	r3, [pc, #412]	@ (80004a4 <main+0x2dc>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b54      	cmp	r3, #84	@ 0x54
 800030c:	d103      	bne.n	8000316 <main+0x14e>
	  	  {
	  		  time_value = 0x7;
 800030e:	4b65      	ldr	r3, [pc, #404]	@ (80004a4 <main+0x2dc>)
 8000310:	2207      	movs	r2, #7
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	e005      	b.n	8000322 <main+0x15a>
	  	  }
	  	  else
	  	  {
	  		  time_value += 0x1;
 8000316:	4b63      	ldr	r3, [pc, #396]	@ (80004a4 <main+0x2dc>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b61      	ldr	r3, [pc, #388]	@ (80004a4 <main+0x2dc>)
 8000320:	701a      	strb	r2, [r3, #0]
	  	  }


	  	  // get voltage input
	  	  if (mode == 1)
 8000322:	4b5c      	ldr	r3, [pc, #368]	@ (8000494 <main+0x2cc>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d10f      	bne.n	800034a <main+0x182>
	  	  {
			  HAL_ADC_Start(&hadc1);
 800032a:	485f      	ldr	r0, [pc, #380]	@ (80004a8 <main+0x2e0>)
 800032c:	f001 f91c 	bl	8001568 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000330:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000334:	485c      	ldr	r0, [pc, #368]	@ (80004a8 <main+0x2e0>)
 8000336:	f001 f9d1 	bl	80016dc <HAL_ADC_PollForConversion>
			  analog_measurement = HAL_ADC_GetValue(&hadc1);
 800033a:	485b      	ldr	r0, [pc, #364]	@ (80004a8 <main+0x2e0>)
 800033c:	f001 faa6 	bl	800188c <HAL_ADC_GetValue>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b59      	ldr	r3, [pc, #356]	@ (80004ac <main+0x2e4>)
 8000346:	801a      	strh	r2, [r3, #0]
 8000348:	e00e      	b.n	8000368 <main+0x1a0>
	  	  }
	  	  else
	  	  {
			  HAL_ADC_Start(&hadc2);
 800034a:	4859      	ldr	r0, [pc, #356]	@ (80004b0 <main+0x2e8>)
 800034c:	f001 f90c 	bl	8001568 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000350:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000354:	4856      	ldr	r0, [pc, #344]	@ (80004b0 <main+0x2e8>)
 8000356:	f001 f9c1 	bl	80016dc <HAL_ADC_PollForConversion>
			  analog_measurement = HAL_ADC_GetValue(&hadc2);
 800035a:	4855      	ldr	r0, [pc, #340]	@ (80004b0 <main+0x2e8>)
 800035c:	f001 fa96 	bl	800188c <HAL_ADC_GetValue>
 8000360:	4603      	mov	r3, r0
 8000362:	b29a      	uxth	r2, r3
 8000364:	4b51      	ldr	r3, [pc, #324]	@ (80004ac <main+0x2e4>)
 8000366:	801a      	strh	r2, [r3, #0]
	  	  }

	  	  x_value = 0;
 8000368:	4b52      	ldr	r3, [pc, #328]	@ (80004b4 <main+0x2ec>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
	  	  bank_value = 0;
 800036e:	4b52      	ldr	r3, [pc, #328]	@ (80004b8 <main+0x2f0>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
	  	  i = 0;
 8000374:	4b4a      	ldr	r3, [pc, #296]	@ (80004a0 <main+0x2d8>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
	  	  while (i <= analog_measurement)
 800037a:	e027      	b.n	80003cc <main+0x204>
	  	  {
	  		  if (i % 85 == 0)
 800037c:	4b48      	ldr	r3, [pc, #288]	@ (80004a0 <main+0x2d8>)
 800037e:	6819      	ldr	r1, [r3, #0]
 8000380:	4b4e      	ldr	r3, [pc, #312]	@ (80004bc <main+0x2f4>)
 8000382:	fb83 2301 	smull	r2, r3, r3, r1
 8000386:	115a      	asrs	r2, r3, #5
 8000388:	17cb      	asrs	r3, r1, #31
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	011a      	lsls	r2, r3, #4
 8000394:	4413      	add	r3, r2
 8000396:	1aca      	subs	r2, r1, r3
 8000398:	2a00      	cmp	r2, #0
 800039a:	d105      	bne.n	80003a8 <main+0x1e0>
	  		  {
	  			  x_value++;
 800039c:	4b45      	ldr	r3, [pc, #276]	@ (80004b4 <main+0x2ec>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	3301      	adds	r3, #1
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b43      	ldr	r3, [pc, #268]	@ (80004b4 <main+0x2ec>)
 80003a6:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  if (x_value == 8)
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <main+0x2ec>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b08      	cmp	r3, #8
 80003ae:	d108      	bne.n	80003c2 <main+0x1fa>
	  		  {
	  			  bank_value++;
 80003b0:	4b41      	ldr	r3, [pc, #260]	@ (80004b8 <main+0x2f0>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <main+0x2f0>)
 80003ba:	701a      	strb	r2, [r3, #0]
	  			  x_value = 0;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <main+0x2ec>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  i++;
 80003c2:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <main+0x2d8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	4a35      	ldr	r2, [pc, #212]	@ (80004a0 <main+0x2d8>)
 80003ca:	6013      	str	r3, [r2, #0]
	  	  while (i <= analog_measurement)
 80003cc:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <main+0x2e4>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b33      	ldr	r3, [pc, #204]	@ (80004a0 <main+0x2d8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	dad0      	bge.n	800037c <main+0x1b4>
	  		  }
	  		  i++;
	  	  }
	  	  */

	  	  bank_array[time_value - 0x7] = bank_value;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <main+0x2f0>)
 80003dc:	781a      	ldrb	r2, [r3, #0]
 80003de:	4b31      	ldr	r3, [pc, #196]	@ (80004a4 <main+0x2dc>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	3b07      	subs	r3, #7
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a36      	ldr	r2, [pc, #216]	@ (80004c0 <main+0x2f8>)
 80003e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  x_array[time_value - 0x7] = x_value;
 80003ec:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <main+0x2ec>)
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	4b2c      	ldr	r3, [pc, #176]	@ (80004a4 <main+0x2dc>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	3b07      	subs	r3, #7
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a32      	ldr	r2, [pc, #200]	@ (80004c4 <main+0x2fc>)
 80003fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  	  // display array of measurements
	  	  i=0;
 80003fe:	4b28      	ldr	r3, [pc, #160]	@ (80004a0 <main+0x2d8>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	  	  while (i != 76)
 8000404:	e07b      	b.n	80004fe <main+0x336>
	  	  {
	  		  bank_value = bank_array[i];
 8000406:	4b26      	ldr	r3, [pc, #152]	@ (80004a0 <main+0x2d8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a2d      	ldr	r2, [pc, #180]	@ (80004c0 <main+0x2f8>)
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <main+0x2f0>)
 8000414:	701a      	strb	r2, [r3, #0]
	  		  x_value = x_array[i];
 8000416:	4b22      	ldr	r3, [pc, #136]	@ (80004a0 <main+0x2d8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a2a      	ldr	r2, [pc, #168]	@ (80004c4 <main+0x2fc>)
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <main+0x2ec>)
 8000424:	701a      	strb	r2, [r3, #0]
	  		  i++;
 8000426:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <main+0x2d8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <main+0x2d8>)
 800042e:	6013      	str	r3, [r2, #0]
			  GLCD_setCursor(i+7, bank_value);
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <main+0x2d8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	3307      	adds	r3, #7
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4a1f      	ldr	r2, [pc, #124]	@ (80004b8 <main+0x2f0>)
 800043c:	7812      	ldrb	r2, [r2, #0]
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fb09 	bl	8000a58 <GLCD_setCursor>

			  if (mode == 1)
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <main+0x2cc>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d106      	bne.n	800045c <main+0x294>
			  {
				  bank_offset = 3;
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <main+0x2d0>)
 8000450:	2203      	movs	r2, #3
 8000452:	701a      	strb	r2, [r3, #0]
				  x_offset = 0;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <main+0x2d4>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	e005      	b.n	8000468 <main+0x2a0>
			  }
			  else
			  {
				  bank_offset = 5;
 800045c:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <main+0x2d0>)
 800045e:	2205      	movs	r2, #5
 8000460:	701a      	strb	r2, [r3, #0]
				  x_offset = 7;
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <main+0x2d4>)
 8000464:	2207      	movs	r2, #7
 8000466:	701a      	strb	r2, [r3, #0]
			  }


			  if (bank_value == bank_offset)
 8000468:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <main+0x2f0>)
 800046a:	781a      	ldrb	r2, [r3, #0]
 800046c:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <main+0x2d0>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	429a      	cmp	r2, r3
 8000472:	d13b      	bne.n	80004ec <main+0x324>
			  {
				  if (x_value == x_offset)
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <main+0x2ec>)
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <main+0x2d4>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	429a      	cmp	r2, r3
 800047e:	d123      	bne.n	80004c8 <main+0x300>
				  {
					  GLCD_data_write(0x1 << x_offset);
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <main+0x2d4>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	2301      	movs	r3, #1
 8000488:	4093      	lsls	r3, r2
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fa93 	bl	80009b8 <GLCD_data_write>
 8000492:	e034      	b.n	80004fe <main+0x336>
 8000494:	20000158 	.word	0x20000158
 8000498:	2000015e 	.word	0x2000015e
 800049c:	2000015f 	.word	0x2000015f
 80004a0:	200003c0 	.word	0x200003c0
 80004a4:	20000000 	.word	0x20000000
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	2000015a 	.word	0x2000015a
 80004b0:	20000090 	.word	0x20000090
 80004b4:	2000015d 	.word	0x2000015d
 80004b8:	2000015c 	.word	0x2000015c
 80004bc:	60606061 	.word	0x60606061
 80004c0:	20000160 	.word	0x20000160
 80004c4:	20000290 	.word	0x20000290
				  }
				  else
				  {
					  GLCD_data_write((0x1 << x_value) + (0x1 << x_offset));
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <main+0x344>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	2301      	movs	r3, #1
 80004d0:	4093      	lsls	r3, r2
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <main+0x348>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	408b      	lsls	r3, r1
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4413      	add	r3, r2
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fa67 	bl	80009b8 <GLCD_data_write>
 80004ea:	e008      	b.n	80004fe <main+0x336>
				  }
			  }
			  else
			  {
				  GLCD_data_write(0x1 << x_value);
 80004ec:	4b07      	ldr	r3, [pc, #28]	@ (800050c <main+0x344>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	2301      	movs	r3, #1
 80004f4:	4093      	lsls	r3, r2
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fa5d 	bl	80009b8 <GLCD_data_write>
	  	  while (i != 76)
 80004fe:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <main+0x34c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b4c      	cmp	r3, #76	@ 0x4c
 8000504:	f47f af7f 	bne.w	8000406 <main+0x23e>
	  	  HAL_Delay(4.6148);
 8000508:	e672      	b.n	80001f0 <main+0x28>
 800050a:	bf00      	nop
 800050c:	2000015d 	.word	0x2000015d
 8000510:	2000015f 	.word	0x2000015f
 8000514:	200003c0 	.word	0x200003c0

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	@ 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	@ 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 f85c 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800053e:	f002 f9fb 	bl	8002938 <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 fada 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000554:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2310      	movs	r3, #16
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000562:	2301      	movs	r3, #1
 8000564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000566:	230a      	movs	r3, #10
 8000568:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fa32 	bl	80029e4 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000586:	f000 fabb 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2104      	movs	r1, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fdfa 	bl	800319c <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ae:	f000 faa7 	bl	8000b00 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	@ 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b0a2      	sub	sp, #136	@ 0x88
 80005be:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2288      	movs	r2, #136	@ 0x88
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 f80c 	bl	80045e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ffbb 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000604:	f000 fa7c 	bl	8000b00 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3788      	adds	r7, #136	@ 0x88
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000634:	4a2f      	ldr	r2, [pc, #188]	@ (80006f4 <MX_ADC1_Init+0xe4>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000664:	2201      	movs	r2, #1
 8000666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	4817      	ldr	r0, [pc, #92]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 8000694:	f000 fe18 	bl	80012c8 <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800069e:	f000 fa2f 	bl	8000b00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 80006ae:	f001 fd99 	bl	80021e4 <HAL_ADCEx_MultiModeConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b8:	f000 fa22 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_ADC1_Init+0xe8>)
 80006be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	2306      	movs	r3, #6
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_ADC1_Init+0xec>)
 80006ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006cc:	2304      	movs	r3, #4
 80006ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_ADC1_Init+0xe0>)
 80006da:	f001 f8e5 	bl	80018a8 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006e4:	f000 fa0c 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	@ 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	50040000 	.word	0x50040000
 80006f8:	04300002 	.word	0x04300002
 80006fc:	407f0000 	.word	0x407f0000

08000700 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000718:	4a29      	ldr	r2, [pc, #164]	@ (80007c0 <MX_ADC2_Init+0xc0>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <MX_ADC2_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_ADC2_Init+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000736:	2204      	movs	r2, #4
 8000738:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <MX_ADC2_Init+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_ADC2_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_ADC2_Init+0xbc>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_ADC2_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <MX_ADC2_Init+0xbc>)
 8000778:	f000 fda6 	bl	80012c8 <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000782:	f000 f9bd 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_ADC2_Init+0xc4>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	@ 0x7f
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <MX_ADC2_Init+0xbc>)
 80007a4:	f001 f880 	bl	80018a8 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80007ae:	f000 f9a7 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000090 	.word	0x20000090
 80007c0:	50040100 	.word	0x50040100
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_SPI1_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_SPI1_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_SPI1_Init+0x74>)
 80007d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_SPI1_Init+0x74>)
 80007e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_SPI1_Init+0x74>)
 80007f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_SPI1_Init+0x74>)
 80007fe:	2220      	movs	r2, #32
 8000800:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_SPI1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_SPI1_Init+0x74>)
 8000816:	2207      	movs	r2, #7
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_SPI1_Init+0x74>)
 8000822:	2208      	movs	r2, #8
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_SPI1_Init+0x74>)
 8000828:	f003 fb60 	bl	8003eec <HAL_SPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 f965 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000f4 	.word	0x200000f4
 8000840:	40013000 	.word	0x40013000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <MX_GPIO_Init+0xfc>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a38      	ldr	r2, [pc, #224]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a32      	ldr	r2, [pc, #200]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <MX_GPIO_Init+0xfc>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a2c      	ldr	r2, [pc, #176]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <MX_GPIO_Init+0xfc>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <MX_GPIO_Init+0xfc>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a26      	ldr	r2, [pc, #152]	@ (8000940 <MX_GPIO_Init+0xfc>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_GPIO_Init+0xfc>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2103      	movs	r1, #3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f001 fffb 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <MX_GPIO_Init+0x100>)
 80008cc:	f001 fff6 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4818      	ldr	r0, [pc, #96]	@ (8000948 <MX_GPIO_Init+0x104>)
 80008e8:	f001 fe3e 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_Pin RST_Pin */
  GPIO_InitStruct.Pin = D_C_Pin|RST_Pin;
 80008ec:	2303      	movs	r3, #3
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f001 fe2f 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800090a:	2340      	movs	r3, #64	@ 0x40
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4808      	ldr	r0, [pc, #32]	@ (8000944 <MX_GPIO_Init+0x100>)
 8000922:	f001 fe21 	bl	8002568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2028      	movs	r0, #40	@ 0x28
 800092c:	f001 fde5 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000930:	2028      	movs	r0, #40	@ 0x28
 8000932:	f001 fdfe 	bl	8002532 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	if (mode != 0)
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		mode = 0;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mode = 1;
	}
}
 8000964:	e002      	b.n	800096c <HAL_GPIO_EXTI_Callback+0x20>
		mode = 1;
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	20000158 	.word	0x20000158

0800097c <SPI_write>:

void SPI_write(unsigned char data)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	// Chip enable, low is assert
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <SPI_write+0x34>)
 800098c:	f001 ff96 	bl	80028bc <HAL_GPIO_WritePin>

	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, HAL_MAX_DELAY);
 8000990:	1df9      	adds	r1, r7, #7
 8000992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000996:	2201      	movs	r2, #1
 8000998:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <SPI_write+0x38>)
 800099a:	f003 fb4a 	bl	8004032 <HAL_SPI_Transmit>

	// Chip disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <SPI_write+0x34>)
 80009a4:	f001 ff8a 	bl	80028bc <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000400 	.word	0x48000400
 80009b4:	200000f4 	.word	0x200000f4

080009b8 <GLCD_data_write>:

void GLCD_data_write(unsigned char data)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	// Switch mode to data mode
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ca:	f001 ff77 	bl	80028bc <HAL_GPIO_WritePin>

	// Send data over SPI
	SPI_write(data);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffd3 	bl	800097c <SPI_write>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <GLCD_command_write>:

void GLCD_command_write(unsigned char data)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
	// Switch to command mode
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f0:	f001 ff64 	bl	80028bc <HAL_GPIO_WritePin>

	// Send data over SPI
	SPI_write(data);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffc0 	bl	800097c <SPI_write>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <GLCD_init>:

void GLCD_init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2140      	movs	r1, #64	@ 0x40
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <GLCD_init+0x50>)
 8000a0e:	f001 ff55 	bl	80028bc <HAL_GPIO_WritePin>

	// Reset screen
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2102      	movs	r1, #2
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1a:	f001 ff4f 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2102      	movs	r1, #2
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f001 ff49 	bl	80028bc <HAL_GPIO_WritePin>

	// Configure screen
	GLCD_command_write(0x21); // enter extended command mode
 8000a2a:	2021      	movs	r0, #33	@ 0x21
 8000a2c:	f7ff ffd7 	bl	80009de <GLCD_command_write>
	GLCD_command_write(0xB6); // set LCD Vop for contrast
 8000a30:	20b6      	movs	r0, #182	@ 0xb6
 8000a32:	f7ff ffd4 	bl	80009de <GLCD_command_write>
	GLCD_command_write(0x04); // set temp coefficient
 8000a36:	2004      	movs	r0, #4
 8000a38:	f7ff ffd1 	bl	80009de <GLCD_command_write>
	GLCD_command_write(0x15); // set LCD bias mode
 8000a3c:	2015      	movs	r0, #21
 8000a3e:	f7ff ffce 	bl	80009de <GLCD_command_write>
	GLCD_command_write(0x20); // return to normal command mode
 8000a42:	2020      	movs	r0, #32
 8000a44:	f7ff ffcb 	bl	80009de <GLCD_command_write>
	GLCD_command_write(0x0C); // set display mode to normal
 8000a48:	200c      	movs	r0, #12
 8000a4a:	f7ff ffc8 	bl	80009de <GLCD_command_write>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	48000400 	.word	0x48000400

08000a58 <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460a      	mov	r2, r1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	71bb      	strb	r3, [r7, #6]
	GLCD_command_write(0x80 | x); // column
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffb4 	bl	80009de <GLCD_command_write>
	GLCD_command_write(0x40 | y); // bank
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffad 	bl	80009de <GLCD_command_write>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <GLCD_clear>:

void GLCD_clear(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	e005      	b.n	8000aa4 <GLCD_clear+0x18>
	{
		GLCD_data_write(0x00); // write zeros to all banks
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff8d 	bl	80009b8 <GLCD_data_write>
	for (i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8000aaa:	dbf5      	blt.n	8000a98 <GLCD_clear+0xc>
	}
	GLCD_setCursor(0, 0); // return cursor to top left
 8000aac:	2100      	movs	r1, #0
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ffd2 	bl	8000a58 <GLCD_setCursor>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <GLCD_putchar>:

void GLCD_putchar(int font_table_row)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	int i;
	for (i=0; i<6; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e00f      	b.n	8000aea <GLCD_putchar+0x2e>
	{
		GLCD_data_write(font_table[font_table_row][i]);
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <GLCD_putchar+0x40>)
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	18ca      	adds	r2, r1, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff6a 	bl	80009b8 <GLCD_data_write>
	for (i=0; i<6; i++)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b05      	cmp	r3, #5
 8000aee:	ddec      	ble.n	8000aca <GLCD_putchar+0xe>
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	08004654 	.word	0x08004654

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a33      	ldr	r2, [pc, #204]	@ (8000c40 <HAL_ADC_MspInit+0xec>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12d      	bne.n	8000bd2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b76:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <HAL_ADC_MspInit+0xf0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <HAL_ADC_MspInit+0xf0>)
 8000b7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b80:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <HAL_ADC_MspInit+0xf0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10b      	bne.n	8000ba0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b88:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000b8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Vin_Pin|Source_Pin;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4820      	ldr	r0, [pc, #128]	@ (8000c4c <HAL_ADC_MspInit+0xf8>)
 8000bcc:	f001 fccc 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bd0:	e031      	b.n	8000c36 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c50 <HAL_ADC_MspInit+0xfc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d12c      	bne.n	8000c36 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_ADC_MspInit+0xf0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <HAL_ADC_MspInit+0xf0>)
 8000be4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <HAL_ADC_MspInit+0xf0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d10b      	bne.n	8000c06 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a15      	ldr	r2, [pc, #84]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000bf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <HAL_ADC_MspInit+0xf4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Vin_Pin;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c22:	230b      	movs	r3, #11
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Vin_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <HAL_ADC_MspInit+0xf8>)
 8000c32:	f001 fc99 	bl	8002568 <HAL_GPIO_Init>
}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	@ 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	50040000 	.word	0x50040000
 8000c44:	200003c4 	.word	0x200003c4
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	50040100 	.word	0x50040100

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <HAL_SPI_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d128      	bne.n	8000cc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <HAL_SPI_MspInit+0x80>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7a:	4a16      	ldr	r2, [pc, #88]	@ (8000cd4 <HAL_SPI_MspInit+0x80>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <HAL_SPI_MspInit+0x80>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_SPI_MspInit+0x80>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <HAL_SPI_MspInit+0x80>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_SPI_MspInit+0x80>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ca6:	23a0      	movs	r3, #160	@ 0xa0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f001 fc50 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	@ 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x4>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <UsageFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f8a3 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d3a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d3e:	f001 fdd5 	bl	80028ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 fc2b 	bl	80045f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fa13 	bl	80001c8 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000db0:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 8000db4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000db8:	200003cc 	.word	0x200003cc

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f001 fb84 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fe8d 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fb8f 	bl	800254e <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e44:	f001 fb59 	bl	80024fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000008 	.word	0x20000008

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000000c 	.word	0x2000000c
 8000e9c:	200003c8 	.word	0x200003c8

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200003c8 	.word	0x200003c8

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3360      	adds	r3, #96	@ 0x60
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <LL_ADC_SetOffset+0x44>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	4313      	orrs	r3, r2
 8000f98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	03fff000 	.word	0x03fff000

08000fb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3360      	adds	r3, #96	@ 0x60
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3360      	adds	r3, #96	@ 0x60
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3330      	adds	r3, #48	@ 0x30
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	211f      	movs	r1, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0e9b      	lsrs	r3, r3, #26
 8001070:	f003 011f 	and.w	r1, r3, #31
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3314      	adds	r3, #20
 80010a0:	461a      	mov	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	0e5b      	lsrs	r3, r3, #25
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	0d1b      	lsrs	r3, r3, #20
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	2107      	movs	r1, #7
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	0d1b      	lsrs	r3, r3, #20
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0318 	and.w	r3, r3, #24
 800110a:	4908      	ldr	r1, [pc, #32]	@ (800112c <LL_ADC_SetChannelSingleDiff+0x44>)
 800110c:	40d9      	lsrs	r1, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	400b      	ands	r3, r1
 8001112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	0007ffff 	.word	0x0007ffff

08001130 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 031f 	and.w	r3, r3, #31
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6093      	str	r3, [r2, #8]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800119c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011a0:	d101      	bne.n	80011a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80011c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80011f0:	d101      	bne.n	80011f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <LL_ADC_IsEnabled+0x18>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <LL_ADC_IsEnabled+0x1a>
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001262:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001266:	f043 0204 	orr.w	r2, r3, #4
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b04      	cmp	r3, #4
 800128c:	d101      	bne.n	8001292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d101      	bne.n	80012b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e130      	b.n	8001544 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fc2f 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff3f 	bl	800118c <LL_ADC_IsDeepPowerDownEnabled>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff25 	bl	8001168 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff5a 	bl	80011dc <LL_ADC_IsInternalRegulatorEnabled>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d115      	bne.n	800135a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff3e 	bl	80011b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001338:	4b84      	ldr	r3, [pc, #528]	@ (800154c <HAL_ADC_Init+0x284>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	099b      	lsrs	r3, r3, #6
 800133e:	4a84      	ldr	r2, [pc, #528]	@ (8001550 <HAL_ADC_Init+0x288>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	099b      	lsrs	r3, r3, #6
 8001346:	3301      	adds	r3, #1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800134c:	e002      	b.n	8001354 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3b01      	subs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f9      	bne.n	800134e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff3c 	bl	80011dc <LL_ADC_IsInternalRegulatorEnabled>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136e:	f043 0210 	orr.w	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff75 	bl	800127a <LL_ADC_REG_IsConversionOngoing>
 8001390:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 80c9 	bne.w	8001532 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 80c5 	bne.w	8001532 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013b0:	f043 0202 	orr.w	r2, r3, #2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff35 	bl	800122c <LL_ADC_IsEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d115      	bne.n	80013f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013c8:	4862      	ldr	r0, [pc, #392]	@ (8001554 <HAL_ADC_Init+0x28c>)
 80013ca:	f7ff ff2f 	bl	800122c <LL_ADC_IsEnabled>
 80013ce:	4604      	mov	r4, r0
 80013d0:	4861      	ldr	r0, [pc, #388]	@ (8001558 <HAL_ADC_Init+0x290>)
 80013d2:	f7ff ff2b 	bl	800122c <LL_ADC_IsEnabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	431c      	orrs	r4, r3
 80013da:	4860      	ldr	r0, [pc, #384]	@ (800155c <HAL_ADC_Init+0x294>)
 80013dc:	f7ff ff26 	bl	800122c <LL_ADC_IsEnabled>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4323      	orrs	r3, r4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4619      	mov	r1, r3
 80013ee:	485c      	ldr	r0, [pc, #368]	@ (8001560 <HAL_ADC_Init+0x298>)
 80013f0:	f7ff fd86 	bl	8000f00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e5b      	ldrb	r3, [r3, #25]
 80013f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001404:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800140a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001412:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	3b01      	subs	r3, #1
 8001428:	045b      	lsls	r3, r3, #17
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	d009      	beq.n	800144c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001444:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4b44      	ldr	r3, [pc, #272]	@ (8001564 <HAL_ADC_Init+0x29c>)
 8001454:	4013      	ands	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	430b      	orrs	r3, r1
 800145e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff1b 	bl	80012a0 <LL_ADC_INJ_IsConversionOngoing>
 800146a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d13d      	bne.n	80014ee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13a      	bne.n	80014ee <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800147c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001484:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001494:	f023 0302 	bic.w	r3, r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	69b9      	ldr	r1, [r7, #24]
 800149e:	430b      	orrs	r3, r1
 80014a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d118      	bne.n	80014de <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014b6:	f023 0304 	bic.w	r3, r3, #4
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014ce:	430a      	orrs	r2, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	e007      	b.n	80014ee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10c      	bne.n	8001510 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	f023 010f 	bic.w	r1, r3, #15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	@ 0x30
 800150e:	e007      	b.n	8001520 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 020f 	bic.w	r2, r2, #15
 800151e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001524:	f023 0303 	bic.w	r3, r3, #3
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001530:	e007      	b.n	8001542 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001542:	7ffb      	ldrb	r3, [r7, #31]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3724      	adds	r7, #36	@ 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	20000004 	.word	0x20000004
 8001550:	053e2d63 	.word	0x053e2d63
 8001554:	50040000 	.word	0x50040000
 8001558:	50040100 	.word	0x50040100
 800155c:	50040200 	.word	0x50040200
 8001560:	50040300 	.word	0x50040300
 8001564:	fff0c007 	.word	0xfff0c007

08001568 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001570:	4857      	ldr	r0, [pc, #348]	@ (80016d0 <HAL_ADC_Start+0x168>)
 8001572:	f7ff fddd 	bl	8001130 <LL_ADC_GetMultimode>
 8001576:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe7c 	bl	800127a <LL_ADC_REG_IsConversionOngoing>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	f040 809c 	bne.w	80016c2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_ADC_Start+0x30>
 8001594:	2302      	movs	r3, #2
 8001596:	e097      	b.n	80016c8 <HAL_ADC_Start+0x160>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fd73 	bl	800208c <ADC_Enable>
 80015a6:	4603      	mov	r3, r0
 80015a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 8083 	bne.w	80016b8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a42      	ldr	r2, [pc, #264]	@ (80016d4 <HAL_ADC_Start+0x16c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d002      	beq.n	80015d6 <HAL_ADC_Start+0x6e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	e000      	b.n	80015d8 <HAL_ADC_Start+0x70>
 80015d6:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <HAL_ADC_Start+0x170>)
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4293      	cmp	r3, r2
 80015de:	d002      	beq.n	80015e6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015fe:	d106      	bne.n	800160e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	f023 0206 	bic.w	r2, r3, #6
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	659a      	str	r2, [r3, #88]	@ 0x58
 800160c:	e002      	b.n	8001614 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	221c      	movs	r2, #28
 800161a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2a      	ldr	r2, [pc, #168]	@ (80016d4 <HAL_ADC_Start+0x16c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d002      	beq.n	8001634 <HAL_ADC_Start+0xcc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	e000      	b.n	8001636 <HAL_ADC_Start+0xce>
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <HAL_ADC_Start+0x170>)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4293      	cmp	r3, r2
 800163c:	d008      	beq.n	8001650 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d002      	beq.n	8001650 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b09      	cmp	r3, #9
 800164e:	d114      	bne.n	800167a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001662:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001666:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fded 	bl	8001252 <LL_ADC_REG_StartConversion>
 8001678:	e025      	b.n	80016c6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <HAL_ADC_Start+0x16c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d002      	beq.n	8001696 <HAL_ADC_Start+0x12e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	e000      	b.n	8001698 <HAL_ADC_Start+0x130>
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <HAL_ADC_Start+0x170>)
 8001698:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00f      	beq.n	80016c6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80016b6:	e006      	b.n	80016c6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80016c0:	e001      	b.n	80016c6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016c2:	2302      	movs	r3, #2
 80016c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	50040300 	.word	0x50040300
 80016d4:	50040100 	.word	0x50040100
 80016d8:	50040000 	.word	0x50040000

080016dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016e6:	4866      	ldr	r0, [pc, #408]	@ (8001880 <HAL_ADC_PollForConversion+0x1a4>)
 80016e8:	f7ff fd22 	bl	8001130 <LL_ADC_GetMultimode>
 80016ec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d102      	bne.n	80016fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016f6:	2308      	movs	r3, #8
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e02a      	b.n	8001752 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d002      	beq.n	800170e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b09      	cmp	r3, #9
 800170c:	d111      	bne.n	8001732 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001720:	f043 0220 	orr.w	r2, r3, #32
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0a4      	b.n	8001876 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800172c:	2304      	movs	r3, #4
 800172e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001730:	e00f      	b.n	8001752 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001732:	4853      	ldr	r0, [pc, #332]	@ (8001880 <HAL_ADC_PollForConversion+0x1a4>)
 8001734:	f7ff fd0a 	bl	800114c <LL_ADC_GetMultiDMATransfer>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001742:	f043 0220 	orr.w	r2, r3, #32
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e093      	b.n	8001876 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800174e:	2304      	movs	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001752:	f7ff fba5 	bl	8000ea0 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001758:	e021      	b.n	800179e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001760:	d01d      	beq.n	800179e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001762:	f7ff fb9d 	bl	8000ea0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d302      	bcc.n	8001778 <HAL_ADC_PollForConversion+0x9c>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d112      	bne.n	800179e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10b      	bne.n	800179e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178a:	f043 0204 	orr.w	r2, r3, #4
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e06b      	b.n	8001876 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0d6      	beq.n	800175a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fc28 	bl	8001012 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01c      	beq.n	8001802 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7e5b      	ldrb	r3, [r3, #25]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d118      	bne.n	8001802 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d111      	bne.n	8001802 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <HAL_ADC_PollForConversion+0x1a8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d002      	beq.n	8001812 <HAL_ADC_PollForConversion+0x136>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e000      	b.n	8001814 <HAL_ADC_PollForConversion+0x138>
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <HAL_ADC_PollForConversion+0x1ac>)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	4293      	cmp	r3, r2
 800181a:	d008      	beq.n	800182e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d002      	beq.n	800182e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b09      	cmp	r3, #9
 800182c:	d104      	bne.n	8001838 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	e00c      	b.n	8001852 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a11      	ldr	r2, [pc, #68]	@ (8001884 <HAL_ADC_PollForConversion+0x1a8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d002      	beq.n	8001848 <HAL_ADC_PollForConversion+0x16c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e000      	b.n	800184a <HAL_ADC_PollForConversion+0x16e>
 8001848:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_ADC_PollForConversion+0x1ac>)
 800184a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2b08      	cmp	r3, #8
 8001856:	d104      	bne.n	8001862 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e008      	b.n	8001874 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	220c      	movs	r2, #12
 8001872:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	50040300 	.word	0x50040300
 8001884:	50040100 	.word	0x50040100
 8001888:	50040000 	.word	0x50040000

0800188c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0b6      	sub	sp, #216	@ 0xd8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x22>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e3c9      	b.n	800205e <HAL_ADC_ConfigChannel+0x7b6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fccf 	bl	800127a <LL_ADC_REG_IsConversionOngoing>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 83aa 	bne.w	8002038 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d824      	bhi.n	800193e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	3b02      	subs	r3, #2
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d81b      	bhi.n	8001936 <HAL_ADC_ConfigChannel+0x8e>
 80018fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001904 <HAL_ADC_ConfigChannel+0x5c>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001915 	.word	0x08001915
 8001908:	0800191d 	.word	0x0800191d
 800190c:	08001925 	.word	0x08001925
 8001910:	0800192d 	.word	0x0800192d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001914:	230c      	movs	r3, #12
 8001916:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800191a:	e010      	b.n	800193e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800191c:	2312      	movs	r3, #18
 800191e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001922:	e00c      	b.n	800193e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001924:	2318      	movs	r3, #24
 8001926:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800192a:	e008      	b.n	800193e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800192c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001934:	e003      	b.n	800193e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001936:	2306      	movs	r3, #6
 8001938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800193c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800194c:	f7ff fb74 	bl	8001038 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fc90 	bl	800127a <LL_ADC_REG_IsConversionOngoing>
 800195a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fc9c 	bl	80012a0 <LL_ADC_INJ_IsConversionOngoing>
 8001968:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800196c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 81a4 	bne.w	8001cbe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 819f 	bne.w	8001cbe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	461a      	mov	r2, r3
 800198e:	f7ff fb7f 	bl	8001090 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00a      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019c4:	f7ff fad0 	bl	8000f68 <LL_ADC_SetOffset>
 80019c8:	e179      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff faed 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x14e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fae2 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	e01e      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x18c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fad7 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a24:	2320      	movs	r3, #32
 8001a26:	e004      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1a4>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e9b      	lsrs	r3, r3, #26
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	e018      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x1d6>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a70:	2320      	movs	r3, #32
 8001a72:	e004      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d106      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff faa6 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fa8a 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x214>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fa7f 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	f003 021f 	and.w	r2, r3, #31
 8001aba:	e01e      	b.n	8001afa <HAL_ADC_ConfigChannel+0x252>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa74 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e004      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x26a>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e9b      	lsrs	r3, r3, #26
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	e018      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x29c>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e004      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d106      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa43 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fa27 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10a      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x2da>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2102      	movs	r1, #2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fa1c 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	0e9b      	lsrs	r3, r3, #26
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	e01e      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x318>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2102      	movs	r1, #2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fa11 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e004      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x330>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	e014      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x35a>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e004      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f9e4 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2103      	movs	r1, #3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f9c8 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x398>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff f9bd 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 021f 	and.w	r2, r3, #31
 8001c3e:	e017      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x3c8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2103      	movs	r1, #3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9b2 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c5a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e003      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x3e0>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	e011      	b.n	8001cac <HAL_ADC_ConfigChannel+0x404>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c98:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ca4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f98f 	bl	8000fdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fab2 	bl	800122c <LL_ADC_IsEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8140 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff fa03 	bl	80010e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4a8f      	ldr	r2, [pc, #572]	@ (8001f24 <HAL_ADC_ConfigChannel+0x67c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f040 8131 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x46e>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2b09      	cmp	r3, #9
 8001d0c:	bf94      	ite	ls
 8001d0e:	2301      	movls	r3, #1
 8001d10:	2300      	movhi	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	e019      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x4a2>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	e003      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d079      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x4c2>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	3301      	adds	r3, #1
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d68:	e015      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x4ee>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d7a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x50e>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	e017      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x53e>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	ea42 0103 	orr.w	r1, r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x564>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	051b      	lsls	r3, r3, #20
 8001e0a:	e018      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x596>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e003      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	e081      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x5b6>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	3301      	adds	r3, #1
 8001e56:	069b      	lsls	r3, r3, #26
 8001e58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e5c:	e015      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x5e2>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e003      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	069b      	lsls	r3, r3, #26
 8001e86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x602>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0e9b      	lsrs	r3, r3, #26
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	e017      	b.n	8001eda <HAL_ADC_ConfigChannel+0x632>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	61bb      	str	r3, [r7, #24]
  return result;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e003      	b.n	8001ece <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	ea42 0103 	orr.w	r1, r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x65e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 021f 	and.w	r2, r3, #31
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	051b      	lsls	r3, r3, #20
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	e01e      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x69c>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	60fb      	str	r3, [r7, #12]
  return result;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e006      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x688>
 8001f22:	bf00      	nop
 8001f24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7ff f8a0 	bl	8001090 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d07a      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5c:	4843      	ldr	r0, [pc, #268]	@ (800206c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f5e:	f7fe fff5 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001f62:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a41      	ldr	r2, [pc, #260]	@ (8002070 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d12c      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d126      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3c      	ldr	r2, [pc, #240]	@ (8002074 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x6e8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002078 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d15d      	bne.n	800204c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4834      	ldr	r0, [pc, #208]	@ (800206c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f9c:	f7fe ffc3 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa0:	4b36      	ldr	r3, [pc, #216]	@ (800207c <HAL_ADC_ConfigChannel+0x7d4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	4a36      	ldr	r2, [pc, #216]	@ (8002080 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fba:	e002      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f9      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc8:	e040      	b.n	800204c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d118      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d112      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x74c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a22      	ldr	r2, [pc, #136]	@ (8002078 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d12d      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ff8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	481b      	ldr	r0, [pc, #108]	@ (800206c <HAL_ADC_ConfigChannel+0x7c4>)
 8002000:	f7fe ff91 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002004:	e024      	b.n	8002050 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1f      	ldr	r2, [pc, #124]	@ (8002088 <HAL_ADC_ConfigChannel+0x7e0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d120      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11a      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_ADC_ConfigChannel+0x7cc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d115      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800202a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800202e:	4619      	mov	r1, r3
 8002030:	480e      	ldr	r0, [pc, #56]	@ (800206c <HAL_ADC_ConfigChannel+0x7c4>)
 8002032:	f7fe ff78 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
 8002036:	e00c      	b.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800204a:	e002      	b.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800204c:	bf00      	nop
 800204e:	e000      	b.n	8002052 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002050:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800205a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800205e:	4618      	mov	r0, r3
 8002060:	37d8      	adds	r7, #216	@ 0xd8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	80080000 	.word	0x80080000
 800206c:	50040300 	.word	0x50040300
 8002070:	c7520000 	.word	0xc7520000
 8002074:	50040000 	.word	0x50040000
 8002078:	50040200 	.word	0x50040200
 800207c:	20000004 	.word	0x20000004
 8002080:	053e2d63 	.word	0x053e2d63
 8002084:	cb840000 	.word	0xcb840000
 8002088:	80000001 	.word	0x80000001

0800208c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f8c5 	bl	800122c <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d169      	bne.n	800217c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <ADC_Enable+0xfc>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e055      	b.n	800217e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f894 	bl	8001204 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020dc:	482b      	ldr	r0, [pc, #172]	@ (800218c <ADC_Enable+0x100>)
 80020de:	f7fe ff35 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 80020e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ec:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <ADC_Enable+0x104>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	4a28      	ldr	r2, [pc, #160]	@ (8002194 <ADC_Enable+0x108>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002106:	e002      	b.n	800210e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3b01      	subs	r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f9      	bne.n	8002108 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002114:	f7fe fec4 	bl	8000ea0 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211a:	e028      	b.n	800216e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f883 	bl	800122c <LL_ADC_IsEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f867 	bl	8001204 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002136:	f7fe feb3 	bl	8000ea0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d914      	bls.n	800216e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d00d      	beq.n	800216e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e007      	b.n	800217e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d1cf      	bne.n	800211c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	8000003f 	.word	0x8000003f
 800218c:	50040300 	.word	0x50040300
 8002190:	20000004 	.word	0x20000004
 8002194:	053e2d63 	.word	0x053e2d63

08002198 <LL_ADC_IsEnabled>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_IsEnabled+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_IsEnabled+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_REG_IsConversionOngoing>:
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b09f      	sub	sp, #124	@ 0x7c
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021fe:	2302      	movs	r3, #2
 8002200:	e093      	b.n	800232a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800220a:	2300      	movs	r3, #0
 800220c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800220e:	2300      	movs	r3, #0
 8002210:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a47      	ldr	r2, [pc, #284]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800221c:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e001      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e072      	b.n	800232a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffb9 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 800224c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ffb3 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d154      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800225e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002260:	2b00      	cmp	r3, #0
 8002262:	d151      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002264:	4b35      	ldr	r3, [pc, #212]	@ (800233c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002266:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d02c      	beq.n	80022ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002282:	035b      	lsls	r3, r3, #13
 8002284:	430b      	orrs	r3, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800228a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800228c:	4829      	ldr	r0, [pc, #164]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800228e:	f7ff ff83 	bl	8002198 <LL_ADC_IsEnabled>
 8002292:	4604      	mov	r4, r0
 8002294:	4828      	ldr	r0, [pc, #160]	@ (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002296:	f7ff ff7f 	bl	8002198 <LL_ADC_IsEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	431c      	orrs	r4, r3
 800229e:	4828      	ldr	r0, [pc, #160]	@ (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022a0:	f7ff ff7a 	bl	8002198 <LL_ADC_IsEnabled>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4323      	orrs	r3, r4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d137      	bne.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022b4:	f023 030f 	bic.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	6811      	ldr	r1, [r2, #0]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6892      	ldr	r2, [r2, #8]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022c8:	e028      	b.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d6:	4817      	ldr	r0, [pc, #92]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022d8:	f7ff ff5e 	bl	8002198 <LL_ADC_IsEnabled>
 80022dc:	4604      	mov	r4, r0
 80022de:	4816      	ldr	r0, [pc, #88]	@ (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022e0:	f7ff ff5a 	bl	8002198 <LL_ADC_IsEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	431c      	orrs	r4, r3
 80022e8:	4815      	ldr	r0, [pc, #84]	@ (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022ea:	f7ff ff55 	bl	8002198 <LL_ADC_IsEnabled>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4323      	orrs	r3, r4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d112      	bne.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022fe:	f023 030f 	bic.w	r3, r3, #15
 8002302:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002304:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002306:	e009      	b.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800231a:	e000      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800231c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002326:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800232a:	4618      	mov	r0, r3
 800232c:	377c      	adds	r7, #124	@ 0x7c
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	bf00      	nop
 8002334:	50040000 	.word	0x50040000
 8002338:	50040100 	.word	0x50040100
 800233c:	50040300 	.word	0x50040300
 8002340:	50040200 	.word	0x50040200

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff3e 	bl	800238c <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff31 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	e17f      	b.n	8002878 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8171 	beq.w	8002872 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x40>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d118      	bne.n	8002648 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800261c:	2201      	movs	r2, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	f003 0201 	and.w	r2, r3, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b03      	cmp	r3, #3
 8002652:	d017      	beq.n	8002684 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d123      	bne.n	80026d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80ac 	beq.w	8002872 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	4b5f      	ldr	r3, [pc, #380]	@ (8002898 <HAL_GPIO_Init+0x330>)
 800271c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271e:	4a5e      	ldr	r2, [pc, #376]	@ (8002898 <HAL_GPIO_Init+0x330>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6613      	str	r3, [r2, #96]	@ 0x60
 8002726:	4b5c      	ldr	r3, [pc, #368]	@ (8002898 <HAL_GPIO_Init+0x330>)
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002732:	4a5a      	ldr	r2, [pc, #360]	@ (800289c <HAL_GPIO_Init+0x334>)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800275c:	d025      	beq.n	80027aa <HAL_GPIO_Init+0x242>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4f      	ldr	r2, [pc, #316]	@ (80028a0 <HAL_GPIO_Init+0x338>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01f      	beq.n	80027a6 <HAL_GPIO_Init+0x23e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4e      	ldr	r2, [pc, #312]	@ (80028a4 <HAL_GPIO_Init+0x33c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x23a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4d      	ldr	r2, [pc, #308]	@ (80028a8 <HAL_GPIO_Init+0x340>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x236>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4c      	ldr	r2, [pc, #304]	@ (80028ac <HAL_GPIO_Init+0x344>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x232>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4b      	ldr	r2, [pc, #300]	@ (80028b0 <HAL_GPIO_Init+0x348>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x22e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4a      	ldr	r2, [pc, #296]	@ (80028b4 <HAL_GPIO_Init+0x34c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x22a>
 800278e:	2306      	movs	r3, #6
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_Init+0x244>
 8002792:	2307      	movs	r3, #7
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_Init+0x244>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_Init+0x244>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x244>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_Init+0x244>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_Init+0x244>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x244>
 80027aa:	2300      	movs	r3, #0
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027bc:	4937      	ldr	r1, [pc, #220]	@ (800289c <HAL_GPIO_Init+0x334>)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ca:	4b3b      	ldr	r3, [pc, #236]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ee:	4a32      	ldr	r2, [pc, #200]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027f4:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002818:	4a27      	ldr	r2, [pc, #156]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800281e:	4b26      	ldr	r3, [pc, #152]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002842:	4a1d      	ldr	r2, [pc, #116]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800286c:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_GPIO_Init+0x350>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f ae78 	bne.w	8002578 <HAL_GPIO_Init+0x10>
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	40010000 	.word	0x40010000
 80028a0:	48000400 	.word	0x48000400
 80028a4:	48000800 	.word	0x48000800
 80028a8:	48000c00 	.word	0x48000c00
 80028ac:	48001000 	.word	0x48001000
 80028b0:	48001400 	.word	0x48001400
 80028b4:	48001800 	.word	0x48001800
 80028b8:	40010400 	.word	0x40010400

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002902:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f81e 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <HAL_PWREx_GetVoltageRange+0x18>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000

08002938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002946:	d130      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002954:	d038      	beq.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002960:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002966:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2232      	movs	r2, #50	@ 0x32
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	3301      	adds	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800297c:	e002      	b.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3b01      	subs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002990:	d102      	bne.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f2      	bne.n	800297e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a4:	d110      	bne.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e00f      	b.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b6:	d007      	beq.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b8:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029c0:	4a05      	ldr	r2, [pc, #20]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40007000 	.word	0x40007000
 80029dc:	20000004 	.word	0x20000004
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e3ca      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f6:	4b97      	ldr	r3, [pc, #604]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a00:	4b94      	ldr	r3, [pc, #592]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80e4 	beq.w	8002be0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_RCC_OscConfig+0x4a>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	f040 808b 	bne.w	8002b3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	f040 8087 	bne.w	8002b3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2e:	4b89      	ldr	r3, [pc, #548]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e3a2      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	4b82      	ldr	r3, [pc, #520]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCC_OscConfig+0x7c>
 8002a56:	4b7f      	ldr	r3, [pc, #508]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a5e:	e005      	b.n	8002a6c <HAL_RCC_OscConfig+0x88>
 8002a60:	4b7c      	ldr	r3, [pc, #496]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d223      	bcs.n	8002ab8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fd1d 	bl	80034b4 <RCC_SetFlashLatencyFromMSIRange>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e383      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a84:	4b73      	ldr	r3, [pc, #460]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a72      	ldr	r2, [pc, #456]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b70      	ldr	r3, [pc, #448]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	496d      	ldr	r1, [pc, #436]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	4968      	ldr	r1, [pc, #416]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
 8002ab6:	e025      	b.n	8002b04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab8:	4b66      	ldr	r3, [pc, #408]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a65      	ldr	r2, [pc, #404]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b63      	ldr	r3, [pc, #396]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4960      	ldr	r1, [pc, #384]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	495b      	ldr	r1, [pc, #364]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fcdd 	bl	80034b4 <RCC_SetFlashLatencyFromMSIRange>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e343      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b04:	f000 fc4a 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b52      	ldr	r3, [pc, #328]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	4950      	ldr	r1, [pc, #320]	@ (8002c58 <HAL_RCC_OscConfig+0x274>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	4a4e      	ldr	r2, [pc, #312]	@ (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b24:	4b4e      	ldr	r3, [pc, #312]	@ (8002c60 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe f969 	bl	8000e00 <HAL_InitTick>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d052      	beq.n	8002bde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	e327      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d032      	beq.n	8002baa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b44:	4b43      	ldr	r3, [pc, #268]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a42      	ldr	r2, [pc, #264]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b50:	f7fe f9a6 	bl	8000ea0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b58:	f7fe f9a2 	bl	8000ea0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e310      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b76:	4b37      	ldr	r3, [pc, #220]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a36      	ldr	r2, [pc, #216]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4931      	ldr	r1, [pc, #196]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b94:	4b2f      	ldr	r3, [pc, #188]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	492c      	ldr	r1, [pc, #176]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	e01a      	b.n	8002be0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f973 	bl	8000ea0 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bbe:	f7fe f96f 	bl	8000ea0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e2dd      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd0:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x1da>
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d074      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x21a>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d10e      	bne.n	8002c16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d064      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x2f0>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d160      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e2ba      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x24a>
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0b      	ldr	r2, [pc, #44]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e026      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c36:	d115      	bne.n	8002c64 <HAL_RCC_OscConfig+0x280>
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b03      	ldr	r3, [pc, #12]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a02      	ldr	r2, [pc, #8]	@ (8002c54 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	0800475c 	.word	0x0800475c
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	20000008 	.word	0x20000008
 8002c64:	4ba0      	ldr	r3, [pc, #640]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a9f      	ldr	r2, [pc, #636]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b9d      	ldr	r3, [pc, #628]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a9c      	ldr	r2, [pc, #624]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe f90c 	bl	8000ea0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f908 	bl	8000ea0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e276      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9e:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2a8>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe f8f8 	bl	8000ea0 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe f8f4 	bl	8000ea0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	@ 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e262      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc6:	4b88      	ldr	r3, [pc, #544]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2d0>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d060      	beq.n	8002da4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x310>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d116      	bne.n	8002d22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_OscConfig+0x328>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e23f      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b76      	ldr	r3, [pc, #472]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	4973      	ldr	r1, [pc, #460]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d20:	e040      	b.n	8002da4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d023      	beq.n	8002d72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe f8b3 	bl	8000ea0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe f8af 	bl	8000ea0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e21d      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d50:	4b65      	ldr	r3, [pc, #404]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b62      	ldr	r3, [pc, #392]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	495f      	ldr	r1, [pc, #380]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
 8002d70:	e018      	b.n	8002da4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f88f 	bl	8000ea0 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe f88b 	bl	8000ea0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1f9      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d03c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe f86a 	bl	8000ea0 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe f866 	bl	8000ea0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1d4      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x3ec>
 8002df0:	e01b      	b.n	8002e2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe f84d 	bl	8000ea0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f849 	bl	8000ea0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1b7      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ef      	bne.n	8002e0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80a6 	beq.w	8002f84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b27      	ldr	r3, [pc, #156]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	4a26      	ldr	r2, [pc, #152]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e54:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCC_OscConfig+0x508>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d118      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e70:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_RCC_OscConfig+0x508>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1d      	ldr	r2, [pc, #116]	@ (8002eec <HAL_RCC_OscConfig+0x508>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7c:	f7fe f810 	bl	8000ea0 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fe f80c 	bl	8000ea0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e17a      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x508>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4d8>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eba:	e029      	b.n	8002f10 <HAL_RCC_OscConfig+0x52c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d115      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x50c>
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	4a07      	ldr	r2, [pc, #28]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	4a03      	ldr	r2, [pc, #12]	@ (8002ee8 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee4:	e014      	b.n	8002f10 <HAL_RCC_OscConfig+0x52c>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	4a9b      	ldr	r2, [pc, #620]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f00:	4b98      	ldr	r3, [pc, #608]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	4a97      	ldr	r2, [pc, #604]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d016      	beq.n	8002f46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fd ffc2 	bl	8000ea0 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fd ffbe 	bl	8000ea0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e12a      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f36:	4b8b      	ldr	r3, [pc, #556]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ed      	beq.n	8002f20 <HAL_RCC_OscConfig+0x53c>
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fd ffab 	bl	8000ea0 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fd ffa7 	bl	8000ea0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e113      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f64:	4b7f      	ldr	r3, [pc, #508]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ed      	bne.n	8002f4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f72:	7ffb      	ldrb	r3, [r7, #31]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f78:	4b7a      	ldr	r3, [pc, #488]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	4a79      	ldr	r2, [pc, #484]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80fe 	beq.w	800318a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	f040 80d0 	bne.w	8003138 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f98:	4b72      	ldr	r3, [pc, #456]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d130      	bne.n	800300e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d127      	bne.n	800300e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d11f      	bne.n	800300e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fd8:	2a07      	cmp	r2, #7
 8002fda:	bf14      	ite	ne
 8002fdc:	2201      	movne	r2, #1
 8002fde:	2200      	moveq	r2, #0
 8002fe0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d113      	bne.n	800300e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d06e      	beq.n	80030ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b0c      	cmp	r3, #12
 8003012:	d069      	beq.n	80030e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003014:	4b53      	ldr	r3, [pc, #332]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003020:	4b50      	ldr	r3, [pc, #320]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0ad      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003030:	4b4c      	ldr	r3, [pc, #304]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800303c:	f7fd ff30 	bl	8000ea0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd ff2c 	bl	8000ea0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e09a      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003056:	4b43      	ldr	r3, [pc, #268]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003062:	4b40      	ldr	r3, [pc, #256]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	4b40      	ldr	r3, [pc, #256]	@ (8003168 <HAL_RCC_OscConfig+0x784>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003072:	3a01      	subs	r2, #1
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800307c:	0212      	lsls	r2, r2, #8
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003084:	0852      	lsrs	r2, r2, #1
 8003086:	3a01      	subs	r2, #1
 8003088:	0552      	lsls	r2, r2, #21
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003090:	0852      	lsrs	r2, r2, #1
 8003092:	3a01      	subs	r2, #1
 8003094:	0652      	lsls	r2, r2, #25
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800309c:	0912      	lsrs	r2, r2, #4
 800309e:	0452      	lsls	r2, r2, #17
 80030a0:	430a      	orrs	r2, r1
 80030a2:	4930      	ldr	r1, [pc, #192]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c0:	f7fd feee 	bl	8000ea0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd feea 	bl	8000ea0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e058      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030da:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e6:	e050      	b.n	800318a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04f      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d148      	bne.n	800318a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a16      	ldr	r2, [pc, #88]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800310e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003110:	f7fd fec6 	bl	8000ea0 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fd fec2 	bl	8000ea0 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e030      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x734>
 8003136:	e028      	b.n	800318a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d023      	beq.n	8003186 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <HAL_RCC_OscConfig+0x780>)
 8003144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fd fea9 	bl	8000ea0 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003150:	e00c      	b.n	800316c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003152:	f7fd fea5 	bl	8000ea0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d905      	bls.n	800316c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e013      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
 8003164:	40021000 	.word	0x40021000
 8003168:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <HAL_RCC_OscConfig+0x7b0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ec      	bne.n	8003152 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_RCC_OscConfig+0x7b0>)
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	4905      	ldr	r1, [pc, #20]	@ (8003194 <HAL_RCC_OscConfig+0x7b0>)
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_RCC_OscConfig+0x7b4>)
 8003180:	4013      	ands	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
 8003184:	e001      	b.n	800318a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	feeefffc 	.word	0xfeeefffc

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0e7      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b75      	ldr	r3, [pc, #468]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d910      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b72      	ldr	r3, [pc, #456]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 0207 	bic.w	r2, r3, #7
 80031c6:	4970      	ldr	r1, [pc, #448]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0cf      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4b66      	ldr	r3, [pc, #408]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d908      	bls.n	800320e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b63      	ldr	r3, [pc, #396]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4960      	ldr	r1, [pc, #384]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04c      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d121      	bne.n	8003272 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0a6      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323a:	4b54      	ldr	r3, [pc, #336]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d115      	bne.n	8003272 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e09a      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003252:	4b4e      	ldr	r3, [pc, #312]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e08e      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003262:	4b4a      	ldr	r3, [pc, #296]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e086      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b46      	ldr	r3, [pc, #280]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4943      	ldr	r1, [pc, #268]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fd fe0c 	bl	8000ea0 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd fe08 	bl	8000ea0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e06e      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b31      	ldr	r3, [pc, #196]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d208      	bcs.n	80032e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b2e      	ldr	r3, [pc, #184]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	492b      	ldr	r1, [pc, #172]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d210      	bcs.n	8003312 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f0:	4b25      	ldr	r3, [pc, #148]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	4923      	ldr	r1, [pc, #140]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003300:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <HAL_RCC_ClockConfig+0x1ec>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e036      	b.n	8003380 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331e:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4918      	ldr	r1, [pc, #96]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4910      	ldr	r1, [pc, #64]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003350:	f000 f824 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	490b      	ldr	r1, [pc, #44]	@ (8003390 <HAL_RCC_ClockConfig+0x1f4>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
 800336c:	4a09      	ldr	r2, [pc, #36]	@ (8003394 <HAL_RCC_ClockConfig+0x1f8>)
 800336e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_RCC_ClockConfig+0x1fc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fd43 	bl	8000e00 <HAL_InitTick>
 800337a:	4603      	mov	r3, r0
 800337c:	72fb      	strb	r3, [r7, #11]

  return status;
 800337e:	7afb      	ldrb	r3, [r7, #11]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40022000 	.word	0x40022000
 800338c:	40021000 	.word	0x40021000
 8003390:	0800475c 	.word	0x0800475c
 8003394:	20000004 	.word	0x20000004
 8003398:	20000008 	.word	0x20000008

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033aa:	4b3e      	ldr	r3, [pc, #248]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b4:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x34>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d121      	bne.n	800340e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d11e      	bne.n	800340e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033d0:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033dc:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	e005      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033ec:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033f8:	4a2b      	ldr	r2, [pc, #172]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d102      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003414:	4b25      	ldr	r3, [pc, #148]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e004      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d101      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003420:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003422:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d134      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800342a:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d003      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0xa6>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d003      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0xac>
 8003440:	e005      	b.n	800344e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003442:	4b1a      	ldr	r3, [pc, #104]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003444:	617b      	str	r3, [r7, #20]
      break;
 8003446:	e005      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800344a:	617b      	str	r3, [r7, #20]
      break;
 800344c:	e002      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	617b      	str	r3, [r7, #20]
      break;
 8003452:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003454:	4b13      	ldr	r3, [pc, #76]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	3301      	adds	r3, #1
 8003460:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	fb03 f202 	mul.w	r2, r3, r2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	0e5b      	lsrs	r3, r3, #25
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	3301      	adds	r3, #1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003494:	69bb      	ldr	r3, [r7, #24]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	0800476c 	.word	0x0800476c
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034c0:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034cc:	f7ff fa26 	bl	800291c <HAL_PWREx_GetVoltageRange>
 80034d0:	6178      	str	r0, [r7, #20]
 80034d2:	e014      	b.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d4:	4b25      	ldr	r3, [pc, #148]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	4a24      	ldr	r2, [pc, #144]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e0:	4b22      	ldr	r3, [pc, #136]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ec:	f7ff fa16 	bl	800291c <HAL_PWREx_GetVoltageRange>
 80034f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003504:	d10b      	bne.n	800351e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b80      	cmp	r3, #128	@ 0x80
 800350a:	d919      	bls.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003510:	d902      	bls.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003512:	2302      	movs	r3, #2
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e013      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003518:	2301      	movs	r3, #1
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	e010      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b80      	cmp	r3, #128	@ 0x80
 8003522:	d902      	bls.n	800352a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003524:	2303      	movs	r3, #3
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e00a      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b80      	cmp	r3, #128	@ 0x80
 800352e:	d102      	bne.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003530:	2302      	movs	r3, #2
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	e004      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b70      	cmp	r3, #112	@ 0x70
 800353a:	d101      	bne.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800353c:	2301      	movs	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 0207 	bic.w	r2, r3, #7
 8003548:	4909      	ldr	r1, [pc, #36]	@ (8003570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003550:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	40022000 	.word	0x40022000

08003574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800357c:	2300      	movs	r3, #0
 800357e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003580:	2300      	movs	r3, #0
 8003582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d041      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003594:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003598:	d02a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800359a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800359e:	d824      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035a4:	d008      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035aa:	d81e      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b4:	d010      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035b6:	e018      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035b8:	4b86      	ldr	r3, [pc, #536]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a85      	ldr	r2, [pc, #532]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c4:	e015      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fabb 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d6:	e00c      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3320      	adds	r3, #32
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fba6 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	74fb      	strb	r3, [r7, #19]
      break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f8:	4b76      	ldr	r3, [pc, #472]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003606:	4973      	ldr	r1, [pc, #460]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800360e:	e001      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d041      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003624:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003628:	d02a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800362a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800362e:	d824      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800363a:	d81e      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003644:	d010      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003646:	e018      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003648:	4b62      	ldr	r3, [pc, #392]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a61      	ldr	r2, [pc, #388]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003652:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003654:	e015      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fa73 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003666:	e00c      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3320      	adds	r3, #32
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fb5e 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	74fb      	strb	r3, [r7, #19]
      break;
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003688:	4b52      	ldr	r3, [pc, #328]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003696:	494f      	ldr	r1, [pc, #316]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a0 	beq.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036b6:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036cc:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	4a40      	ldr	r2, [pc, #256]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d8:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e8:	4b3b      	ldr	r3, [pc, #236]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3a      	ldr	r2, [pc, #232]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036f4:	f7fd fbd4 	bl	8000ea0 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036fa:	e009      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fd fbd0 	bl	8000ea0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d902      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	74fb      	strb	r3, [r7, #19]
        break;
 800370e:	e005      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003710:	4b31      	ldr	r3, [pc, #196]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ef      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d15c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01f      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d019      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003740:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800374a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800374c:	4b21      	ldr	r3, [pc, #132]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	4a20      	ldr	r2, [pc, #128]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800375c:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003762:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800376c:	4a19      	ldr	r2, [pc, #100]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd fb8f 	bl	8000ea0 <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003784:	e00b      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fb8b 	bl	8000ea0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d902      	bls.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	74fb      	strb	r3, [r7, #19]
            break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ec      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c2:	4904      	ldr	r1, [pc, #16]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037ca:	e009      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e0:	7c7b      	ldrb	r3, [r7, #17]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d105      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e6:	4b9e      	ldr	r3, [pc, #632]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ea:	4a9d      	ldr	r2, [pc, #628]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037fe:	4b98      	ldr	r3, [pc, #608]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f023 0203 	bic.w	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	4994      	ldr	r1, [pc, #592]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003820:	4b8f      	ldr	r3, [pc, #572]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 020c 	bic.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382e:	498c      	ldr	r1, [pc, #560]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003842:	4b87      	ldr	r3, [pc, #540]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	4983      	ldr	r1, [pc, #524]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003864:	4b7e      	ldr	r3, [pc, #504]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	497b      	ldr	r1, [pc, #492]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003886:	4b76      	ldr	r3, [pc, #472]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003894:	4972      	ldr	r1, [pc, #456]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b6:	496a      	ldr	r1, [pc, #424]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ca:	4b65      	ldr	r3, [pc, #404]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	4961      	ldr	r1, [pc, #388]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	4959      	ldr	r1, [pc, #356]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390e:	4b54      	ldr	r3, [pc, #336]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391c:	4950      	ldr	r1, [pc, #320]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003930:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	4948      	ldr	r1, [pc, #288]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003952:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	493f      	ldr	r1, [pc, #252]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d028      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003974:	4b3a      	ldr	r3, [pc, #232]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003982:	4937      	ldr	r1, [pc, #220]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003992:	d106      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b32      	ldr	r3, [pc, #200]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a31      	ldr	r2, [pc, #196]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
 80039a0:	e011      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f8c8 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e0:	491f      	ldr	r1, [pc, #124]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039fc:	60d3      	str	r3, [r2, #12]
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f899 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02b      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3e:	4908      	ldr	r1, [pc, #32]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a50:	4b03      	ldr	r3, [pc, #12]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a02      	ldr	r2, [pc, #8]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	e014      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2101      	movs	r1, #1
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f867 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a94:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa2:	4928      	ldr	r1, [pc, #160]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f844 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d014      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	74bb      	strb	r3, [r7, #18]
 8003ace:	e011      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3320      	adds	r3, #32
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f925 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b00:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b0e:	490d      	ldr	r1, [pc, #52]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b32:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000

08003b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b56:	4b75      	ldr	r3, [pc, #468]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d018      	beq.n	8003b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b62:	4b72      	ldr	r3, [pc, #456]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d10d      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
       ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
       ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d047      	beq.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e044      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d018      	beq.n	8003bce <RCCEx_PLLSAI1_Config+0x86>
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d825      	bhi.n	8003bec <RCCEx_PLLSAI1_Config+0xa4>
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d002      	beq.n	8003baa <RCCEx_PLLSAI1_Config+0x62>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d009      	beq.n	8003bbc <RCCEx_PLLSAI1_Config+0x74>
 8003ba8:	e020      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003baa:	4b60      	ldr	r3, [pc, #384]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11d      	bne.n	8003bf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e01a      	b.n	8003bf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bcc:	e013      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bce:	4b57      	ldr	r3, [pc, #348]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bda:	4b54      	ldr	r3, [pc, #336]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bea:	e006      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e004      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c02:	4b4a      	ldr	r3, [pc, #296]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	430b      	orrs	r3, r1
 8003c18:	4944      	ldr	r1, [pc, #272]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d17d      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c24:	4b41      	ldr	r3, [pc, #260]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd f936 	bl	8000ea0 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c36:	e009      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c38:	f7fd f932 	bl	8000ea0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d902      	bls.n	8003c4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4a:	e005      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4c:	4b37      	ldr	r3, [pc, #220]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ef      	bne.n	8003c38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d160      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c64:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	0211      	lsls	r1, r2, #8
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	0912      	lsrs	r2, r2, #4
 8003c7c:	0452      	lsls	r2, r2, #17
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	492a      	ldr	r1, [pc, #168]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	610b      	str	r3, [r1, #16]
 8003c86:	e027      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d112      	bne.n	8003cb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c8e:	4b27      	ldr	r3, [pc, #156]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6892      	ldr	r2, [r2, #8]
 8003c9e:	0211      	lsls	r1, r2, #8
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6912      	ldr	r2, [r2, #16]
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0552      	lsls	r2, r2, #21
 8003caa:	430a      	orrs	r2, r1
 8003cac:	491f      	ldr	r1, [pc, #124]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
 8003cb2:	e011      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6952      	ldr	r2, [r2, #20]
 8003cca:	0852      	lsrs	r2, r2, #1
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	0652      	lsls	r2, r2, #25
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	4916      	ldr	r1, [pc, #88]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cd8:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a13      	ldr	r2, [pc, #76]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd f8dc 	bl	8000ea0 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cec:	f7fd f8d8 	bl	8000ea0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d00:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4904      	ldr	r1, [pc, #16]	@ (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000

08003d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d4a:	4b67      	ldr	r3, [pc, #412]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d62:	4b61      	ldr	r3, [pc, #388]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
       ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d047      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e044      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d018      	beq.n	8003db6 <RCCEx_PLLSAI2_Config+0x86>
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d825      	bhi.n	8003dd4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <RCCEx_PLLSAI2_Config+0x62>
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d009      	beq.n	8003da4 <RCCEx_PLLSAI2_Config+0x74>
 8003d90:	e020      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d92:	4b55      	ldr	r3, [pc, #340]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11d      	bne.n	8003dda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da2:	e01a      	b.n	8003dda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003da4:	4b50      	ldr	r3, [pc, #320]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d116      	bne.n	8003dde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e013      	b.n	8003dde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003db6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dc2:	4b49      	ldr	r3, [pc, #292]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dd2:	e006      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e004      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	4939      	ldr	r1, [pc, #228]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d167      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a35      	ldr	r2, [pc, #212]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e18:	f7fd f842 	bl	8000ea0 <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e1e:	e009      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e20:	f7fd f83e 	bl	8000ea0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	73fb      	strb	r3, [r7, #15]
        break;
 8003e32:	e005      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ef      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d14a      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	0211      	lsls	r1, r2, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	0912      	lsrs	r2, r2, #4
 8003e64:	0452      	lsls	r2, r2, #17
 8003e66:	430a      	orrs	r2, r1
 8003e68:	491f      	ldr	r1, [pc, #124]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	614b      	str	r3, [r1, #20]
 8003e6e:	e011      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6912      	ldr	r2, [r2, #16]
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4916      	ldr	r1, [pc, #88]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fc fffe 	bl	8000ea0 <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ea6:	e009      	b.n	8003ebc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea8:	f7fc fffa 	bl	8000ea0 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d902      	bls.n	8003ebc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eba:	e005      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ef      	beq.n	8003ea8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4904      	ldr	r1, [pc, #16]	@ (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e095      	b.n	800402a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f0e:	d009      	beq.n	8003f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fe88 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f64:	d902      	bls.n	8003f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e002      	b.n	8003f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 0204 	and.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b088      	sub	sp, #32
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_SPI_Transmit+0x22>
 8004050:	2302      	movs	r3, #2
 8004052:	e15f      	b.n	8004314 <HAL_SPI_Transmit+0x2e2>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405c:	f7fc ff20 	bl	8000ea0 <HAL_GetTick>
 8004060:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d002      	beq.n	8004078 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004076:	e148      	b.n	800430a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Transmit+0x52>
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004088:	e13f      	b.n	800430a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d4:	d10f      	bne.n	80040f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	d007      	beq.n	8004114 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800411c:	d94f      	bls.n	80041be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_Transmit+0xfa>
 8004126:	8afb      	ldrh	r3, [r7, #22]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d142      	bne.n	80041b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004150:	e02f      	b.n	80041b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d112      	bne.n	8004186 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	881a      	ldrh	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004184:	e015      	b.n	80041b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004186:	f7fc fe8b 	bl	8000ea0 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d803      	bhi.n	800419e <HAL_SPI_Transmit+0x16c>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800419c:	d102      	bne.n	80041a4 <HAL_SPI_Transmit+0x172>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80041b0:	e0ab      	b.n	800430a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ca      	bne.n	8004152 <HAL_SPI_Transmit+0x120>
 80041bc:	e080      	b.n	80042c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Transmit+0x19a>
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d174      	bne.n	80042b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d912      	bls.n	80041fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	1c9a      	adds	r2, r3, #2
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b02      	subs	r3, #2
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041fa:	e05c      	b.n	80042b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004222:	e048      	b.n	80042b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d12b      	bne.n	800428a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d912      	bls.n	8004262 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	1c9a      	adds	r2, r3, #2
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b02      	subs	r3, #2
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004260:	e029      	b.n	80042b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004288:	e015      	b.n	80042b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800428a:	f7fc fe09 	bl	8000ea0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d803      	bhi.n	80042a2 <HAL_SPI_Transmit+0x270>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042a0:	d102      	bne.n	80042a8 <HAL_SPI_Transmit+0x276>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80042b4:	e029      	b.n	800430a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1b1      	bne.n	8004224 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f947 	bl	8004558 <SPI_EndRxTxTransaction>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e003      	b.n	800430a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004312:	7ffb      	ldrb	r3, [r7, #31]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800432c:	f7fc fdb8 	bl	8000ea0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4413      	add	r3, r2
 800433a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800433c:	f7fc fdb0 	bl	8000ea0 <HAL_GetTick>
 8004340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004342:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	015b      	lsls	r3, r3, #5
 8004348:	0d1b      	lsrs	r3, r3, #20
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004352:	e054      	b.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435a:	d050      	beq.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800435c:	f7fc fda0 	bl	8000ea0 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	429a      	cmp	r2, r3
 800436a:	d902      	bls.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d13d      	bne.n	80043ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800438a:	d111      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004394:	d004      	beq.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439e:	d107      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b8:	d10f      	bne.n	80043da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e017      	b.n	800441e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d19b      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000004 	.word	0x20000004

0800442c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800443e:	f7fc fd2f 	bl	8000ea0 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	4413      	add	r3, r2
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800444e:	f7fc fd27 	bl	8000ea0 <HAL_GetTick>
 8004452:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800445c:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00da      	lsls	r2, r3, #3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	0d1b      	lsrs	r3, r3, #20
 800446c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004474:	e060      	b.n	8004538 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800447c:	d107      	bne.n	800448e <SPI_WaitFifoStateUntilTimeout+0x62>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800448c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004494:	d050      	beq.n	8004538 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004496:	f7fc fd03 	bl	8000ea0 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d902      	bls.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d13d      	bne.n	8004528 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c4:	d111      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ce:	d004      	beq.n	80044da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d8:	d107      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f2:	d10f      	bne.n	8004514 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004512:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e010      	b.n	800454a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	3b01      	subs	r3, #1
 8004536:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d196      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	@ 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000004 	.word	0x20000004

08004558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff5b 	bl	800442c <SPI_WaitFifoStateUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e027      	b.n	80045dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fec0 	bl	800431c <SPI_WaitFlagStateUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e014      	b.n	80045dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff ff34 	bl	800442c <SPI_WaitFifoStateUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e000      	b.n	80045dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4d0d      	ldr	r5, [pc, #52]	@ (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004630 <__libc_init_array+0x3c>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2600      	movs	r6, #0
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4d0b      	ldr	r5, [pc, #44]	@ (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	@ (8004638 <__libc_init_array+0x44>)
 8004608:	f000 f818 	bl	800463c <_init>
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2600      	movs	r6, #0
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f855 3b04 	ldr.w	r3, [r5], #4
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f855 3b04 	ldr.w	r3, [r5], #4
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	0800479c 	.word	0x0800479c
 8004630:	0800479c 	.word	0x0800479c
 8004634:	0800479c 	.word	0x0800479c
 8004638:	080047a0 	.word	0x080047a0

0800463c <_init>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

08004648 <_fini>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr
